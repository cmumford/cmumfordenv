#!/usr/bin/env python

from multiprocessing.pool import ThreadPool
from subprocess import Popen, PIPE, STDOUT
import platform
import sys
import time
import thread
import go

stdout_lock=thread.allocate_lock()

def FormatDur(seconds):
  if seconds < 60:
    return "%d sec" % seconds
  if seconds < 3600:
    minutes = int(seconds / 60)
    seconds -= minutes * 60
    return "%02d:%02d" % (minutes, seconds)
  hours = int(seconds / 3600)
  seconds -= hours * 3600
  minutes = int(seconds / 60)
  seconds -= minutes * 60
  return "%02d:%02d:%02d" % (hours, minutes, seconds)

class Task(object):
  def __init__(self, cmd, cwd, input = None):
    self.cmd = cmd
    self.input = input
    self.cwd = cwd
    self.stdout = None
    self.stderr = None
    self.return_code = None
    self.runtime = None

  def Print(self):
    print 'Cmd: "%s"' % ' '.join(self.cmd)
    print 'Ret: %d' % self.return_code
    if self.stdout:
      for line in self.stdout.splitlines():
        print "O>  %s" % line
    if self.stderr:
      for line in self.stderr.splitlines():
        print "E>  %s" % line
    print 'Dur: %s' % FormatDur(self.runtime)

def task_runner(task):
  start = time.time()
  try:
    stdout_lock.acquire()
    print 'Running: "%s" in "%s"...' % (' '.join(task.cmd), task.cwd)
    stdout_lock.release()
    p = Popen(task.cmd, stdout=PIPE, stdin=PIPE, stderr=PIPE, cwd=task.cwd)
    if task.input:
      [task.stdout, task.stderr] = p.communicate(input=task.input)
    else:
      [task.stdout, task.stderr] = p.communicate()
    task.return_code = p.returncode
  except OSError as e:
    task.stderr = str(e)
    task.return_code = e.errno
  except Exception as e:
    print type(e)
    task.stderr = str(e)
    task.return_code = -1
  task.runtime = time.time() - start
  return task

if __name__ == '__main__':
  go = go.Go()
  pool_size = 4
  pool = ThreadPool(pool_size)
  tasks = []
  scan_dirs = {
    'c': '*third_party/[a-z]*',
    'level': None
  }
  if platform.system() == 'Darwin':
    ctags = 'ctags'
  else:
    ctags = 'ctags-exuberant'
  for shortcut in scan_dirs.keys():
    cmd = [ctags,
           '--extra=+f',
           '--languages=+C++,+C,+Java,-JavaScript,+Perl,+Python,+Ruby',
           '--recurse=yes',
           '--exclude=*.pyx',
           '--links=no']
    if scan_dirs[shortcut]:
      cmd.append('--exclude=%s' % scan_dirs[shortcut])
    tasks.append(Task(cmd, go.getval(shortcut)))
  results = pool.map(task_runner, tasks)
  failures = []
  total_runtimes = 0
  for task in results:
    if task.return_code:
      failures.append(task)
    task.Print()
    total_runtimes += task.runtime
    print

  print "%d failed out of %d" % (len(failures), len(tasks))
  avg_seconds = total_runtimes / len(tasks)
  print "Average runtime: %s per table/date" % FormatDur(avg_seconds)
