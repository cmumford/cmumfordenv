#!/usr/bin/perl -w

##
# This is a simple script to front-end a Subversion status. You 
# can give it zero or more directories to update. Those directories
# can either be under svn control, or have children that are under
# svn control, and they will be stat'ed. Also, the output of 
# Subversion is colorized to more easily pick out conflicts and other
# things of interest.
#

use strict;
use Getopt::Long;

$| = 1;	# Force flushing.

my $verbose = 0;
my $nocolor = 0;

my $result = GetOptions ( "nocolor" => \$nocolor, "verbose" => \$verbose);

my $colorize = not $nocolor;

foreach my $dir (@ARGV) {
	&statDirOrChildren($dir);
}

if (scalar(@ARGV) == 0) {
	&statDirOrChildren('.');
}

sub statDirOrChildren()
{
	my $dir = shift;
	
	return if isSvnMetaDir($dir);
	
	print "stat'ing dir or children for $dir\n" if $verbose;
	
	if (isDirInSvn($dir)) {
		statDir($dir);
	}
	else {
		opendir DIR, $dir or die "Can't open directory $dir: $?\n";
		my @files = readdir DIR;
		closedir DIR;
		
		foreach my $file (@files) {
			next if $file eq '.';
			next if $file eq '..';
			
			my $fullpath = "$dir/$file";
			
			print " fullpath $fullpath\n" if $verbose;
			
			if ( -d $fullpath ) {
				if (isDirInSvn($fullpath)) {
					statDir($fullpath);
				}
				else {
					print "$fullpath is not under Subversion control\n" if not shouldIgnoreDir($fullpath);
				}
			}
		}
	}
}

sub statDir()
{
	my $dir = shift;
	
	print "svn status $dir\n";

	foreach ( `svn status $dir` ) {
		chomp;
		if ($colorize) {
			if ( m/^\s*M\s+/ ) {		# Modified
				print "\e[0;34m$_\e[0m\n";	# blue/black
			}
			elsif ( m/^\s*A\s+/ ) {		# Added
				print "\e[0;36m$_\e[0m\n";	# cyan/black
			}
			elsif ( m/^\s*D\s+/ ) {		# Deleted
				print "\e[0;33m$_\e[0m\n";	# brown/black
			}
			elsif ( m/^\s*C\s+/ ) {		# Conflicted
				print "\e[0;31m$_\e[0m\n";	# red/black
			}
			elsif ( m/^\s*!\s+/ ) {		# item is missing (removed by non-svn command) or incomplete
				print "\e[0;31m$_\e[0m\n";	# red/black
			}
			else {	# Everything else
				print "$_\n";
			}
		}
		else {
			print "$_\n";
		}
	}
}

sub isDirInSvn()
{
	my $dir = shift;
	
	my $svndir = "$dir/.svn";
	
	return -d $svndir;
}

sub shouldIgnoreDir()
{
	my $dir = shift;
	
	return 1 if isSvnMetaDir($dir);
	return 1 if $dir =~ m/\.metadata$/;
	
	return 0;
}

sub isSvnMetaDir()
{
	my $dir = shift;
	
	return 1 if $dir =~ m/\.svn/;
}



