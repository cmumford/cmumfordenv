#!/usr/bin/env python

import multiprocessing
import os
import random
import signal
import subprocess
import sys
import threading
import time

class Options(object):
  def __init__(self):
    self.cmd = ['crbuild', '-v', 'cursor']
    self.cmd = ['crbuild', '-v', 'content-browsertests-idb-single', '--run-arg=--gtest_shuffle']
    self.cmd = ['crbuild', '-v', 'shutdown']
    self.num_jobs = 1
    self.num_runs_per_job = 80

keep_running = True

def handler(signum, frame):
  print 'Signal handler called with signal %s' % signum
  global keep_running
  if signum == signal.SIGINT:
    keep_running = false

def touch(fname, times=None):
  with open(fname, 'a'):
    os.utime(fname, times)

class RunnerThread(threading.Thread):
  def __init__(self, identifier, options):
    threading.Thread.__init__(self)
    self.identifier = identifier
    self.options = options

  def run(self):
    global keep_running
    try:
      print 'Thread started: %s' % self.identifier
      # A delay ensures that the tests don't all run in lock-step starting at
      # the same time.
      time.sleep(random.uniform(0.0, 2.0))
      for run in range(self.options.num_runs_per_job):
        if not keep_running:
          print "Aborting thread %s" % self.identifier
          break
        print "Thread %s, run %d" % (self.identifier, run)
        subprocess.check_call(self.options.cmd)
    except Exception as e:
      keep_running = False # Stop all threads
      print >> sys.stderr, "EXCEPTION: %s" % e
    print 'Thread finished: %s' % self.identifier

if __name__ == '__main__':
  signal.signal(signal.SIGINT, handler)
  threads = []
  options = Options()
  for i in range(options.num_jobs):
    thread = RunnerThread(str(i), options)
    thread.start()
    threads.append(thread)
