#!/usr/bin/env python

import copy
import multiprocessing
import os
import random
import signal
import subprocess
import sys
import threading
import time

class Options(object):
  def __init__(self):
    self.cmd = ['crbuild', '-v', 'cursor']
    self.cmd = ['crbuild', '-v', 'content-browsertests-idb-single',
                '--run-arg=--gtest_shuffle']
    self.cmd = ['crbuild', '-v', 'shutdown']
    self.cmd = ['/usr/local/google/home/cmumford/work/ssd/chrome/src/third_party/leveldatabase/endurance_wrapper']
    self.cmd = ['crbuild', 'content-browsertests-idb-android']
    self.num_jobs = 1
    self.num_runs_per_job = 40

keep_running = True

def handler(signum, frame):
  print 'Signal handler called with signal %s' % signum
  global keep_running
  if signum == signal.SIGINT:
    keep_running = False

def touch(fname, times=None):
  with open(fname, 'a'):
    os.utime(fname, times)

class RunnerThread(threading.Thread):
  def __init__(self, identifier, options):
    threading.Thread.__init__(self)
    self.identifier = identifier
    self.options = options

  def run(self):
    global keep_running
    try:
      # A delay ensures that the tests don't all run in lock-step starting at
      # the same time.
      if self.options.num_jobs > 0:
        time.sleep(random.uniform(0.0, 2.0))
      for run in range(self.options.num_runs_per_job):
        if not keep_running:
          print "Aborting thread %s" % self.identifier
          break
        cmd = copy.copy(self.options.cmd)
        if 'endurance_wrapper' in cmd[0]:
          duration = random.uniform(0.1, 20.0)
          cmd.extend(['-d',
                      str(duration),
                      '--ldbdir=/tmp/leveldb/leveldb_endurance_%s' % self.identifier])
          print "Thread %s, run %d for %f sec" % (self.identifier, run, duration)
        else:
          print "Thread %s, run %d" % (self.identifier, run)
        subprocess.check_call(cmd)
      print "Successfully ran for %d iterations on thread %s" % \
          (self.options.num_runs_per_job, self.identifier)
    except Exception as e:
      keep_running = False # Stop all threads
      print >> sys.stderr, "EXCEPTION in thread %s: %s" % (self.identifier, str(e))

def FormatDur(seconds):
  if seconds < 60:
    return "%d sec" % seconds
  if seconds < 3600:
    minutes = int(seconds / 60)
    seconds -= minutes * 60
    return "%02d:%02d" % (minutes, seconds)
  hours = int(seconds / 3600)
  seconds -= hours * 3600
  minutes = int(seconds / 60)
  seconds -= minutes * 60
  return "%02d:%02d:%02d" % (hours, minutes, seconds)

if __name__ == '__main__':
  start = time.time()
  signal.signal(signal.SIGINT, handler)
  threads = []
  options = Options()
  for i in range(options.num_jobs):
    thread = RunnerThread(str(i), options)
    thread.start()
    threads.append(thread)
  for thread in threads:
    thread.join()
  runtime = time.time() - start
  print "Duration: %s" % FormatDur(runtime)
