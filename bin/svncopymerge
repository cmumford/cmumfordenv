#!/usr/bin/ruby

##
## This is a utility script to copy one local subversion working directory on
## top of another. You can think of this as a manual merge where there need not
## be any relationship between the two working directories (i.e. one isn't 
## branched from the other, etc.).
##
## This is handy for the way that we (the platform team) handles merges with
## webkit.org
##

require 'optparse'
require 'rubygems'
require 'libxml'    # gem install -r libxml-ruby
require 'fileutils.rb'

include LibXML

class Arguments
	attr_accessor :dst_dir, :src_dir, :dry_run, :verbose
	def initialize(args)
		super()
		self.verbose = false
		self.dry_run = false

		opts = OptionParser.new do |opts|
			opts.banner = "Copy one svn/git working dir to another.\n\n"
			opts.banner += "Usage: #$0 [options] <dst dir> <src dir>"
			opts.on('-v', '--verbose', 'Make this program verbose.') do
				self.verbose = true
			end
			opts.on('-d', '--dry-run', "Only do a dry run (don't copy anything).") do
				self.dry_run = true
			end
			opts.on_tail('-h', '--help', 'display this help and exit.') do
				puts opts
				puts "Results are in svn revision (i.e. chronological) order"
				exit
			end
		end

		opts.parse!(args)

		self.dst_dir = ARGV.shift if not ARGV.empty?
		self.src_dir = ARGV.shift if not ARGV.empty?

		if not self.dst_dir then
			puts "Must supply a destination dir"
			exit 1
		elsif not File.directory?(self.dst_dir) then
			puts "Invalid destination directory: \"#{self.dst_dir}\""
			exit 2
		end

		if not self.src_dir then
			puts "Must supply a source dir"
			exit 1
		elsif not File.directory?(self.src_dir) then
			puts "Invalid source directory: \"#{self.src}\""
			exit 2
		end

		puts "Copying #{self.src_dir} -> #{self.dst_dir}" if self.verbose
		puts "Dry run" if self.dry_run
	end
end


$opts = Arguments.new(ARGV)

def findFirstNode(node, xpath)
	return nil if node == nil
	nodes = node.find(xpath)
	if nodes != nil and nodes.first != nil then
		return nodes.first	
	else
		return nil
	end
end

def getFirstNodeContent(node, xpath)
	first = findFirstNode(node, xpath)
	if first == nil then
		return nil
	else
		return first.content
	end
end

def getSvnFileUrl(file)
	begin
		parser = XML::Parser.string(`svn info --xml \"#{file}\"`)
		doc = parser.parse
		return getFirstNodeContent(doc, 'entry/url')
	rescue
		return false
	end
end

def isEntryUnderSvnControl(file)
	return getSvnFileUrl(file) != nil
end

def isEntryUnderGitControl(file)
	# I don't know how to determine this properly. Returning true
	# should be OK assuming the destination directory was created
	# entirely by a checkout and no manual file/dir creation took place.
	return true
end

def isDirUnderSvnControl(dir)
	return File.exists?("#{dir}/.svn")
end

def isDirUnderGitControl(dir)
	return File.exists?("#{dir}/.git")
end

def svnAdd(file)
	`svn add \"#{file}\"`
end

def rmSvnMetaDirs(dir)
	full = "#{dir}/.svn"
	FileUtils.rm_rf(full) if File.directory?(full)
	Dir.entries(dir).each do |entry|
		next if entry == '.' or entry == '..'
		full = "#{dir}/#{entry}"
		rmSvnMetaDirs(full) if File.directory?(full)
	end
end

def deleteDestNotInSrc(dst, src, dst_vcs)
	dst_entries = Dir.entries(dst)
	dst_entries.each do |entry|
		next if entry == '.' or entry == '..' or entry == '.svn' or entry == '.git'

		next if entry =~ /^\.git/

		full_src = "#{src}/#{entry}"
		full_dst = "#{dst}/#{entry}"

		# Hard-coded hack for webkit because we deleted the layout tests from our
		# source.
		next if full_dst =~ /LayoutTests/

		if not File.exists?(full_src) then
			puts "  Deleting #{full_dst}" if $opts.verbose or $opts.dry_run
			if dst_vcs == 'svn' then
				`svn rm #{full_dst}` if not $opts.dry_run
			elsif dst_vcs == 'git' then
				`git rm #{full_dst}` if not $opts.dry_run
			else
				raise "Unknown VCS"
			end
		end
		deleteDestNotInSrc(full_dst, full_src, dst_vcs) if File.directory?(full_dst)
	end
end

def isDirEmptyExcludingSvnMetaDir(dir)
	Dir.entries(dir).each do |entry|
		next if entry == '.' or entry == '..' or entry == '.svn'
		return false
	end
	return true
end

def copyNewOrModifiedSrc(dst, src, dst_vcs, src_vcs)
	puts "Analyzing #{src}[#{src_vcs}] and #{dst}[#{dst_vcs}]" if $opts.verbose

	src_entries = Dir.entries(src)
	src_entries.each do |entry|
		next if entry == '.' or entry == '..' or entry == '.svn' or entry == '.git'
		full_src = "#{src}/#{entry}"
		full_dst = "#{dst}/#{entry}"

		if (src_vcs == 'svn' and isEntryUnderSvnControl(full_src)) or
			(src_vcs == 'git' and isEntryUnderGitControl(full_src)) then
			if File.exists?(full_dst) then
				if (dst_vcs == 'svn' and isEntryUnderSvnControl(full_dst)) or 
					(dst_vcs == 'git' and isEntryUnderGitControl(full_dst)) then
					if File.directory?(full_dst) then
						# Both are directories under revision control. Process children
						copyNewOrModifiedSrc(full_dst, full_src, dst_vcs, src_vcs)
					else
						# Both are files, copy src->dst if different.
						if !FileUtils.compare_file(full_src, full_dst) then
							puts "   Copying #{full_src} -> #{full_dst}" if $opts.verbose
							FileUtils.cp( full_src, full_dst ) if not $opts.dry_run
						end
					end
				else
					STDERR.puts "#{full_dst} already exists, but is not under revision control"
					exit 1
				end
			else
				# Destination doesn't exist

				# Subversion adds empty directories, but Git doesn't
				next if File.directory?(full_src) and isDirEmptyExcludingSvnMetaDir(full_src)

				if File.directory?(full_src) then
					puts "   Copying dir #{full_src} -> #{full_dst}" if $opts.verbose or $opts.dry_run
					if not $opts.dry_run then
						FileUtils.cp_r( full_src, full_dst )
						# Remove the .svn folders from the new dst because they refer to the 
						# src URL and also the add will fail.
						rmSvnMetaDirs(full_dst)
					end
				else
					puts "   Copying file #{full_src} -> #{full_dst}" if $opts.verbose or $opts.dry_run
					FileUtils.cp( full_src, full_dst ) if not $opts.dry_run
				end
				if dst_vcs == 'svn' then
					`svn add #{full_dst}` if not $opts.dry_run
				elsif dst_vcs == 'git' then
					`git add #{full_dst}` if not $opts.dry_run
				else
					raise "Unknown VCS"
				end
			end
		end
	end
end

src = File.expand_path($opts.src_dir)
dst = File.expand_path($opts.dst_dir)

src_vcs = nil
if isDirUnderSvnControl(src)
	src_vcs = 'svn'
elsif isDirUnderGitControl(src)
	src_vcs = 'git'
else
	STDERR.puts "#{src} must be under Git or Subversion control"
	exit 1
end

dst_vcs = nil
if isDirUnderSvnControl(dst)
	dst_vcs = 'svn'
elsif isDirUnderGitControl(dst)
	dst_vcs = 'git'
else
	STDERR.puts "#{dst} must be under Git or Subversion control"
	exit 1
end

deleteDestNotInSrc(dst, src, dst_vcs)
copyNewOrModifiedSrc(dst, src, dst_vcs, src_vcs)
