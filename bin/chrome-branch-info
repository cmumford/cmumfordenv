#!/usr/bin/env python

from functools import cmp_to_key
import subprocess
from multiprocessing.pool import ThreadPool
import sys
import thread

stdout_lock=thread.allocate_lock()

class Git:
  @staticmethod
  def CountCommits(branch):
    cmd = ['git', 'rev-list', '--count', 'master..%s' % branch]
    return int(subprocess.check_output(cmd))

  @staticmethod
  def GetBranches(prefix):
    cmd = ['git', '--no-pager', 'branch', '--all']
    branches = []
    for line in subprocess.check_output(cmd).splitlines():
      line = line.strip()
      if line.startswith(prefix):
        branches.append(line)
    return branches

prefix = 'remotes/branch-heads/'
prefix_len = len(prefix)

def make_key(name):
  """Make a key out of a branch name (for sorting).

  This is a bit of a kludge. At present it handles numerical, or quasi-numerical
  (i.e. 12_34) branch numbers. Other branch names are sorted by the first char
  only.

  >>> make_key('remotes/branch-heads/89')
  89.0
  >>> make_key('remotes/branch-heads/89_23')
  89.00023
  >>> make_key('remotes/branch-heads/b')
  0.038461538461538464
  >>> make_key('remotes/branch-heads/z')
  0.9615384615384616
  >>> make_key('')
  0.0
  """
  try:
    if len(name) == 0:
      return 0.0
    bname = name[prefix_len:]
    items = bname.split("_")
    if len(items) == 2:
      return float(items[0]) + float(items[1]) / 100000
    else:
      return float(bname)
  except ValueError:
    bname = bname.lower()
    return float(ord(bname[0]) - ord('a')) / 26.0

class ChromeGitInfo:
  @staticmethod
  def GetBranchHeads():
    return sorted(Git.GetBranches(prefix), key=lambda bname: make_key(bname))

def task_runner(branch):
  count = Git.CountCommits(branch)
  try:
    stdout_lock.acquire()
    print >> sys.stderr, '%s: %d' % (branch, count)
  finally:
    stdout_lock.release()
  return count

def DoStuff():
  branch_heads = ChromeGitInfo.GetBranchHeads()

  pool_size = 48
  pool = ThreadPool(pool_size)
  branch_commits = pool.map(task_runner, branch_heads)
  print "Branch,Num Commits"
  for idx in range(len(branch_heads)):
    print "%s,%s" % (branch_heads[idx], branch_commits[idx])

if __name__ == "__main__":
    import doctest
    doctest.testmod()
    DoStuff()
